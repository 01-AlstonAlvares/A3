# This workflow defines the CI/CD pipeline for the project.
# It automatically tests the model and deploys a Docker image when a new tag is pushed.

name: Build, Test, and Deploy

# Use the name of the user who triggered the workflow in the run name
run-name: ${{ github.actor }} is building and deploying

# --- Trigger ---
# The workflow will only run when a tag starting with 'v' is pushed (e.g., v1.0, v1.2.1)
on:
  push:
    tags:
      - 'v*'

jobs:
  # ----------------------------------------------------
  # Job 1: Continuous Integration (CI) - Run Tests
  # ----------------------------------------------------
  test:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code
      - name: Check out repository
        uses: actions/checkout@v4

      # Step 2: Set up the Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Step 3: Install the required Python packages
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f app/requirements.txt ]; then pip install -r app/requirements.txt; fi

      # Step 4: Run the unit tests against the MLflow model
      # This step securely passes your MLflow credentials (stored as GitHub secrets)
      # as environment variables to the test script.
      - name: Run model tests
        env:
          MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
        run: python app/test.py

  # --------------------------------------------------------------------
  # Job 2: Continuous Deployment (CD) - Build and Push Docker Image
  # This job will only run if the 'test' job completes successfully.
  # --------------------------------------------------------------------
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code
      - name: Check out repository
        uses: actions/checkout@v4

      # Step 2: Log in to Docker Hub
      # This uses secrets to securely log in to your Docker Hub account.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 3: Extract metadata for Docker, including the Git tag
      # This will automatically tag the Docker image with the version from your Git tag (e.g., 'v1.0.0' -> '1.0.0')
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/car-price-predictor
          tags: type=semver,pattern={{version}}

      # Step 4: Build the Docker image and push it to Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

